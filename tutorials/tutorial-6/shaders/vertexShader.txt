#version 400 core

// Declara a entrada "position" do tipo vec3 (vetor de três componentes)
in vec3 position;

// Declara a entrada "textureCoords" do tipo vec2 (vetor de duas componentes)
in vec2 textureCoords;

// Declara a saída "pass_textureCoords" do tipo vec2 (vetor de duas componentes)
// Essa variável será passada para o próximo estágio do pipeline gráfico (fragment shader)
out vec2 pass_textureCoords;

// Função principal do shader
void main(void) {

    // Atribui à variável pré-definida "gl_Position" a posição do vértice após a transformação do espaço do objeto para o espaço de recorte (clip space).
    // Isso é necessário para que a GPU saiba onde posicionar os vértices na janela de exibição.
    gl_Position = vec4(position, 1.0);

    // Atribui à variável "pass_textureCoords" as coordenadas de textura "textureCoords".
    // Essas coordenadas de textura serão interpoladas para cada fragmento do triângulo durante o processo de rasterização.
    // Essa variável será passada para o fragment shader para que possamos mapear texturas no modelo 3D.
    pass_textureCoords = textureCoords;
}